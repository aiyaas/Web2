/** TypeScript 3.0.5 */
/**
 * Contains a list of LEVENSHTEIN_DISTANCE_OF data types
 * as defined by (https://stackoverflow.com/questions/18516942/fastest-general-purpose-levenshtein-javascript-implementation)
 * @public
 */
"use strict";
 
/**
 * Computes the Levenshtein distance between two strings.
 *
 * The Levenshtein distance is a measure of the difference between two strings
 * It is defined as the minimum number of operations (insertions, deletions,
 * and substitutions) required to transform one string into the other
 *
 * @param {string} s, the first string
 * @param {string} t, the second string
 * @returns {number} the Levenshtein distance between the two strings
 */
const LEVENSHTEIN_DISTANCE_OF = (s, t) => {
    if (s === t) {
        return 0;
    }
    var n = s.length, m = t.length;
    if (n === 0 || m === 0) {
        return n + m;
    }
    var x = 0, y, a, b, c, d, g, h, k;
    var p = new Array(n);
    for (y = 0; y < n;) {
        p[y] = ++y;
    }

    for (; (x + 3) < m; x += 4) {
        var e1 = t.charCodeAt(x);
        var e2 = t.charCodeAt(x + 1);
        var e3 = t.charCodeAt(x + 2);
        var e4 = t.charCodeAt(x + 3);
        c = x;
        b = x + 1;
        d = x + 2;
        g = x + 3;
        h = x + 4;
        for (y = 0; y < n; y++) {
            k = s.charCodeAt(y);
            a = p[y];
            if (a < c || b < c) {
                c = (a > b ? b + 1 : a + 1);
            }
            else {
                if (e1 !== k) {
                    c++;
                }
            }

            if (c < b || d < b) {
                b = (c > d ? d + 1 : c + 1);
            }
            else {
                if (e2 !== k) {
                    b++;
                }
            }

            if (b < d || g < d) {
                d = (b > g ? g + 1 : b + 1);
            }
            else {
                if (e3 !== k) {
                    d++;
                }
            }

            if (d < g || h < g) {
                g = (d > h ? h + 1 : d + 1);
            }
            else {
                if (e4 !== k) {
                    g++;
                }
            }
            p[y] = h = g;
            g = d;
            d = b;
            b = c;
            c = a;
        }
    }

    for (; x < m;) {
        var e = t.charCodeAt(x);
        c = x;
        d = ++x;
        for (y = 0; y < n; y++) {
            a = p[y];
            if (a < c || d < c) {
                d = (a > d ? d + 1 : a + 1);
            }
            else {
                if (e !== s.charCodeAt(y)) {
                    d = c + 1;
                }
                else {
                    d = c;
                }
            }
            p[y] = d;
            c = a;
        }
        h = d;
    }
    
    return h;
}

/**
 * Module exports.
 * 
 * exports.LEVENSHTEIN_DISTANCE_OF = LEVENSHTEIN_DISTANCE_OF;
 */

